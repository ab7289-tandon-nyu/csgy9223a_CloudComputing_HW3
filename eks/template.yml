AWSTemplateFormatVersion: "2010-09-09"

Description: AWS Stack for EKS Control Pane

Parameters:
  SecurityGroup:
    Description: The name of our security group
    Type: String
  Subnet1:
    Type: String
  Subnet2:
    Type: String

Resources:
  EksClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
        Version: 2012-10-17
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
        - "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"

  # EksWorkerNodeRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Action: sts:AssumeRole
  #           Effect: Allow
  #           Principal:
  #             Service: ec2.amazonaws.com
  #       Version: 2012-10-17
  #     Path: /
  #     ManagedPolicyArns:
  #       - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  #       - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  #       - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"

  EksFargateNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: eks-fargate-pods.amazonaws.com
        Version: 2012-10-17
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy"

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: hw3_eks
      RoleArn: !GetAtt EksClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !Ref SecurityGroup
        EndpointPublicAccess: true
        EndpointPrivateAccess: false
        PublicAccessCidrs:
          - "172.35.0.0/16"
          - "0.0.0.0/0"
      KubernetesNetworkConfig:
        IpFamily: ipv4
        ServiceIpv4Cidr: 10.100.0.0/16
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit

  # EksNodeGroup:
  #   Type: AWS::EKS::Nodegroup
  #   Properties:
  #     ClusterName: !Ref EKSCluster
  #     NodeRole: !GetAtt EksWorkerNodeRole.Arn
  #     CapacityType: ON_DEMAND
  #     ScalingConfig:
  #       MinSize: 1
  #       DesiredSize: 2
  #       MaxSize: 3
  #     InstanceTypes:
  #       - t3.small
  #       - t3.medium
  #       - t3.large
  #     Subnets:
  #       - !Ref Subnet1
  #       - !Ref Subnet2

  EKSFargateProfile:
    Type: AWS::EKS::FargateProfile
    Properties:
      ClusterName: !Ref EKSCluster
      PodExecutionRoleArn: !GetAtt EksFargateNodeRole.Arn
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      Selectors:
        - Namespace: default
          Labels:
            - Key: "role"
              Value: "mongo"
            - Key: "app"
              Value: "webapp-deployment"

Outputs:
  Endpoint:
    Value: !GetAtt EKSCluster.Endpoint
  CertificateAuthorityData:
    Value: !GetAtt EKSCluster.CertificateAuthorityData
  ClusterSecurityGroup:
    Value: !GetAtt EKSCluster.ClusterSecurityGroupId
